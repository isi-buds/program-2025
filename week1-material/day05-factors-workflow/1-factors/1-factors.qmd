---
title: "Working with Factors"
execute:
  echo: true
subtitle: "ISI-BUDS 2025"
format: 
  revealjs:
    slide-number: true
    incremental: true
    theme: ["../slide-style.scss"]
    title-slide-attributes: 
      data-background-size: 12%
      data-background-position: 50% 75%
---


```{r}
#| echo: false
library(tidyverse)
```




# Working with Factors

```{r echo = FALSE, fig.align='center', out.width="30%"}
knitr::include_graphics("img/forcats-logo.png")
```

```{r}
library(forcats)
```


Functions have the form `fct_something()`

. . .

Most of the examples in this lecture is from the `forcats` packages documentation.

##

```{r}
glimpse(gss_cat)
```



## Collapsing factors

```{r}
str(gss_cat$partyid)
```

. . .

```{r}
count(gss_cat, partyid)
```

## Collapsing factors

```{r}
partyid2 <- fct_collapse(gss_cat$partyid,
                         missing = c("No answer", "Don't know"),
                         other = "Other party",
                         rep = c("Strong republican", "Not str republican"),
                         ind = c("Ind,near rep", "Independent", "Ind,near dem"),
                         dem = c("Not str democrat", "Strong democrat")
                         )
```


. . .

```{r}
partyid2
```

## Collapsing factors

```{r}
gss_cat |> 
  mutate(partyid2 = 
           fct_collapse(partyid,
                        missing = c("No answer", "Don't know"),
                        other = "Other party",
                        rep = c("Strong republican", "Not str republican"),
                        ind = c("Ind,near rep", "Independent", "Ind,near dem"),
                        dem = c("Not str democrat", "Strong democrat")))
```



## Dropping levels

```{r}
year <- factor(c("sophomore", "sophomore", "first-year", "sophomore"), 
            levels = c("first-year", "sophomore", "junior", "senior"))
year

```

. . .

```{r}
fct_drop(year)
```

. . .

```{r}
fct_drop(year, only = "senior")
```


## Matching

```{r}
fct_match(gss_cat$marital, "Married")
```

## Matching

```{r}
fct_match(gss_cat$marital, c("Married", "Divorced"))
```

##

We can use these functions along with other data wrangling functions.

```{r}
gss_cat |> 
  mutate(married_divorced = fct_match(marital, c("Married", "Divorced")))
```



## Recoding levels

```{r}
places <- factor(c("Irvine", 
                   "Los Angeles", 
                   "Albany", 
                   "New York City"))
places

```

##

```{r}
fct_recode(places, 
           California = "Irvine", 
           California = "Los Angeles") 
```


##

```{r}
fct_recode(places, 
           California = "Irvine", 
           California = "Los Angeles")
```

##

```{r warning = TRUE, error=TRUE}
fct_recode(places, 
           California = "Irvinnne", 
           California = "Los Angeles")
```

##

[forcats cheatsheet](http://www.flutterbys.com.au/stats/downloads/slides/figure/factors.pdf)

##

*Your task*:

- Load covid testing line list data 

```{r echo = TRUE, message = FALSE}
# install.packages("medicaldata")
library(medicaldata)
covid_data <- medicaldata::covid_testing
```

- make `patient_class` a factor using `as.factor()` function. How many levels does it have?


- count appearances of each level in the data.

- create a new `patient_class2` column/variable by collapsing 9 levels of the `patient_class` factor into 5 levels by grouping some of them together. Count appearances of these new levels in the data

## 

```{r echo = TRUE, message = FALSE}
covid_data <- covid_data |> 
  mutate(patient_class = as.factor(patient_class))

covid_data |> 
  count(patient_class)
```

##

```{r echo = TRUE, message = FALSE}
covid_data <- covid_data |> 
  mutate(patient_class2 = 
           fct_collapse(patient_class,
                        inpatient = c("inpatient"),
                        surgery = c("admit after surgery-ip", "admit after surgery-obs", "day surgery"),
                        outpatient = c("outpatient", "recurring outpatient", "observation"),
                        emergency = c("emergency"),
                        not_applicable = c("not applicable")
                        ))

covid_data |> 
  count(patient_class2)
```
